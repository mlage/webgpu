Mudanças no código:

  1. Depth: 
  
    No descriptor do pipeline, definimos um descriptor (depthStencil) que configura
  a maneira com que o depth test e o stencil test funcionam. No nosso caso estamos apenas
  configurando o depth test.

  1.1) Definimos o formato que vai ser usado no depth test. No caso, o formato em que
  os valores são carregados na textura. (que veremos adiante);

  1.2) setamos o depthWriteEnabled como true. Essa propriedade indica que o pipeline propriedade
  trocar os valores da textura. Ou seja, os valores de depth dos (fragmentos?) podem substituir 
  o da textura.

  1.3) definimos a função de comparação como less, ou seja, se o depth do determinado fragmento
  for menor que o setado na textura, então o fragmento passa. As funções são iguais a do openGL,
  e seus nomes são:
    never, less, equal, less-equal, greater, not-equal, greater-equal, always

  2. Uniform buffer: 
  
    Criamos o uniform buffer, defininindo seu tamanho em bytes como 64, pois passaremos a matriz
  modelViewProjection, que possui 16 floats. E definimos seus usages, ou seja, como ele vai ser usado
  pela gpu. São estes, uniform e copy_dst. O uniform é meio autoexplicativo, porém o copy_dst vale
  dizer que apenas indica que o buffer pode ser usado como destino de uma operação onde um outro
  buffer seria copiado para ele.

  3. Binding Group:
  
    Definimos o binding group. O binding group é um grupo de informações que serão carregadas.
  nas entries, podemos definir um array de informações que serão passadas. Nesse caso definimos
  apenas uma. Definimos para ela o binding = 0, que vai ser usado no shader para identificar os
  valores passados. Então definimos como recurso passado para o binding 0, o nosso uniform buffer.

  4. Depth texture:
  
    Definimos nossa depth texture finalmente. Definimos como o seu formato o mesmo do definido no
  pipeline, o depth24plus. Depois definimos a sua Usage como RENDER_ATTACHMENT, que indica que uma
  textura pode ser usada como cor ou então ser usada justamente no testes de depth e stencil. E
  definimos seu tamanho como o tamanho do canvas, e profundidade 1.

  5. Depth/Stencil attachment:

    Primeiro definimos a textura como a textura criada. Definimos também a load operation. Existem as 
  opções "clear" e "load". Clear vai setar inicialmente todos os valores para o depth test com um 
  determinado clear value, definido em depthClearValue. load irá carregar os valores antes armazenados
  na textura.

    Definimos então a store operation. Existem duas opções, "discard" e "store", que vai indicar 
  se o render pipeline vai registrar ou não os valores de depth depois do teste na textura. 
  Usamos store.

  5. a matriz é de fato escrita no uniform buffer na linha do writeBuffer, perto do final da main.

  6. Por fim, setamos o bindGroup com setBindGroup, método do renderPass, e indicamos sua posição(ou índice)

  Shader:

  @group(0) @binding(0)
    var<uniform> mvpMatrix: mat4x4<f32>;

  aqui indicamos o grupo usado, definido como dito acima, e então, deste grupo, o binding que setamos nosso
  buffer.